# -*- coding: utf-8 -*-
"""forecasting_lightdm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CaY94N7cgbKoCm-sF0pE862L4N-1ZRw_
"""

!pip install lightgbm==3.3.5

!git clone https://github.com/panambY/Hourly_Energy_Consumption.git

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import lightgbm as lgb
from sklearn.metrics import mean_squared_error, mean_absolute_error

pjme = pd.read_csv('./Hourly_Energy_Consumption/data/PJME_hourly.csv', index_col=[0], parse_dates=[0])

# color_pal = ["#F8766D", "#D39200", "#93AA00", "#00BA38", "#00C19F", "#00B9E3", "#619CFF", "#DB72FB"]
# _ = pjme.plot(style='.', figsize=(15,5), color=color_pal[0], title='PJM East')

split_date = '01-Jan-2015'
pjme_train = pjme.loc[pjme.index <= split_date].copy()
pjme_test = pjme.loc[pjme.index > split_date].copy()

def create_features(df, label=None):
    """
    Creates time series features from datetime index
    """
    df['date'] = df.index
    df['hour'] = df['date'].dt.hour
    df['dayofweek'] = df['date'].dt.dayofweek
    df['quarter'] = df['date'].dt.quarter
    df['month'] = df['date'].dt.month
    df['year'] = df['date'].dt.year
    df['dayofyear'] = df['date'].dt.dayofyear
    df['dayofmonth'] = df['date'].dt.day
    df['weekofyear'] = df['date'].dt.isocalendar().week

    X = df[['hour','dayofweek','quarter','month','year',
           'dayofyear','dayofmonth','weekofyear']]
    if label:
        y = df[label]
        return X, y
    return X

X_train, y_train = create_features(pjme_train, label='PJME_MW')
X_test, y_test = create_features(pjme_test, label='PJME_MW')

for column in X_train.columns:
  if "int" in str(X_train[column].dtype).lower():
    X_train[column] = X_train[column].astype(int)

for column in X_test.columns:
  if "int" in str(X_test[column].dtype).lower():
    X_test[column] = X_test[column].astype(int)


# for column in X_train.columns:
#   if "int" in str(X_train[column].dtype).lower():
#     X_train.loc[:, column] = X_train.loc[:, column].astype(int)

# for column in X_test.columns:
#   if "int" in str(X_test[column].dtype).lower():
#     X_test.loc[:, column] = X_test.loc[:, column].astype(int)

# LightGBM 데이터셋 준비
train_data = lgb.Dataset(X_train, label=y_train)
test_data = lgb.Dataset(X_test, label=y_test, reference=train_data)





params = {
    'boosting_type': 'gbdt',
    'objective': 'regression',
    'metric': 'l2',
    'num_leaves': 31,
    'learning_rate': 0.05,
    'feature_fraction': 0.9,
    'bagging_fraction': 0.8,
    'bagging_freq': 5,
    'verbose': 0
}

gbm = lgb.train(params,
                train_data,
                num_boost_round=20,
                valid_sets=test_data,
                early_stopping_rounds=5)

# 예측
y_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration)

from sklearn.metrics import mean_squared_error

# RMSE 계산
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"Test RMSE: {rmse}")

pjme_test['MW_Prediction'] = y_pred
pjme_all = pd.concat([pjme_test, pjme_train], sort=False)

_ = pjme_all[['PJME_MW','MW_Prediction']].plot(figsize=(15, 5))

mean_squared_error(y_true=pjme_test['PJME_MW'],
                   y_pred=pjme_test['MW_Prediction'])

mean_absolute_error(y_true=pjme_test['PJME_MW'],
                   y_pred=pjme_test['MW_Prediction'])

def mean_absolute_percentage_error(y_true, y_pred):
    """Calculates MAPE given y_true and y_pred"""
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mean_absolute_percentage_error(y_true=pjme_test['PJME_MW'],
                   y_pred=pjme_test['MW_Prediction'])

